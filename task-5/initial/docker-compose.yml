version: "3.8"

services:
  postgresdb:
    image: postgres
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=$POSTGRESDB_USER
      - POSTGRES_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
      - POSTGRES_DB=$POSTGRESDB_DATABASE
    ports:
      - $POSTGRESDB_LOCAL_PORT:$POSTGRESDB_DOCKER_PORT
    networks:
      - batching

  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.17.28'
    platform: linux/amd64
    container_name: 'elasticsearch'
    restart: 'unless-stopped'
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - 'discovery.type=single-node'
      - 'xpack.security.enabled=false'
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    healthcheck:
      test: 'curl -f http://localhost:9200 || exit 1'
    networks:
      - batching

  logstash:
    image: 'docker.elastic.co/logstash/logstash:7.17.28'
    container_name: 'logstash'
    restart: 'unless-stopped'
    ports:
      - '5044:5044'
    volumes:
      - './logstash/pipeline:/usr/share/logstash/pipeline/'
    depends_on:
      - 'elasticsearch'
    healthcheck:
      test: 'curl -f http://localhost:9600 || exit 1'
    networks:
      - batching

  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.17.28'
    container_name: 'kibana'
    restart: 'unless-stopped'
    ports:
      - '5601:5601'
    environment:
      - 'ELASTICSEARCH_HOSTS=http://elasticsearch:9200'
    depends_on:
      - 'elasticsearch'
    healthcheck:
      test: 'curl -f http://localhost:5601 || exit 1'
    networks:
      - batching

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.28
    container_name: filebeat
    user: root
    restart: 'unless-stopped'
    command: filebeat -e -strict.perms=false
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/var/lib/docker/containers:/usr/share/dockerlogs/data:ro'
    depends_on:
      - 'elasticsearch'
      - 'logstash'
    networks:
      - batching

  prometheus:
    image: 'prom/prometheus:v3.4.0'
    container_name: 'prometheus'
    restart: 'unless-stopped'
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]
    networks:
      - batching

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    hostname: otel-collector
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./otel-collector/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "9201:9201"
      - "8889:8889"
    networks:
      - batching

  tempo:
    image: grafana/tempo:main-e607202
    container_name: tempo
    hostname: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200"
      - "4317"
    depends_on:
      - otel-collector
    networks:
      - batching

  grafana:
    image: 'grafana/grafana:12.0.1'
    container_name: 'grafana'
    restart: 'unless-stopped'
    ports:
      - '3000:3000'
    environment:
      - 'GF_USERS_ALLOW_SIGN_UP=false'
    volumes:
      - './grafana/provisioning:/etc/grafana/provisioning'
    depends_on:
      - 'prometheus'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]
    networks:
      - batching

  app:
    depends_on:
      - postgresdb
      - filebeat
      - grafana
    image: batch-processing
    container_name: app
    hostname: app
    ports:
      - '8080:8080'
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: no
    networks:
      - batching

  job-runner:
    depends_on:
      - app
    image: job-runner:latest
    restart: no
    networks:
      - batching

networks:
  batching:
    driver: bridge